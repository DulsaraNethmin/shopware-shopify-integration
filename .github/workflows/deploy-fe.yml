name: Deploy Backend to Hostinger VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check AWS CLI version
        run: aws --version

      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Docker and Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 4: Decode .env base64 string and restore it
      - name: Decode .env file
        run: |
          echo "${{ secrets.ENV_BASE64_FE }}" | base64 --decode > ./client/.env.local
          # cat ./apps/api/.env

      # Step 4: Determine Docker Image Tag
      - name: Set Docker image tag
        id: docker_tag
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "::set-output name=tag::$(date +'%Y%m%d%H%M%S')"
          elif [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            tag_version=$(echo "${{ github.ref }}" | sed -e 's/refs\/tags\/v//')
            echo "::set-output name=tag::v$tag_version"
          else
            echo "::set-output name=tag::$(date +'%Y%m%d%H%M%S')"
          fi

      - name: Build Docker image
        run: >
          docker buildx build --no-cache --load 
          -t ${{ secrets.DOCKER_HUB_USERNAME }}/shopware-client:${{ steps.docker_tag.outputs.tag }} 
          -f ./client/Dockerfile ./client

      # Step 6: Log in to DockerHub using PAT
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_HUB_PAT }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      # Step 7: Push Docker image to DockerHub
      - name: Push Docker image to DockerHub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/shopware-client:${{ steps.docker_tag.outputs.tag }}

      # Step 8: SSH into the VPS and deploy
      - name: Deploy to VPS
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  # Add your SSH private key to GitHub Secrets
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key
          chmod 600 private_key

          # SSH into VPS and update the Docker container
          ssh -i private_key -o StrictHostKeyChecking=no root@116.202.27.145 << 'EOF'
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/shopware-client:${{ steps.docker_tag.outputs.tag }}
            docker stop shopware-client || true
            docker rm shopware-client || true
            docker run -d --name shopware-client --network shopware-client -p 3000 ${{ secrets.DOCKER_HUB_USERNAME }}/shopware-client:${{ steps.docker_tag.outputs.tag }}
          
            docker image prune -a -f
          EOF

      # Step 9: Clean up
      - name: Clean up private key
        run: rm -f private_key
